name: '_ Publishing_Test: Storage: StorageAccounts'

on:
  workflow_dispatch:
    inputs:
      removeDeployment:
        type: boolean
        description: 'Remove deployed module'
        required: false
        default: 'true'

  push:
    #branches:
    #  - main
    paths:
      - '.github/actions/templates/**'
      - 'utilities/pipelines/**'
      - '.github/workflows/ms.storage.storageaccounts copy.yml'
      - 'arm/Microsoft.Storage/storageAccounts/**'
      - '!*/**/readme.md'

env:
  modulePath: 'arm/Microsoft.Storage/storageAccounts'
  workflowPath: '.github/workflows/ms.storage.storageaccounts.yml'
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  ARM_SUBSCRIPTION_ID: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
  ARM_MGMTGROUP_ID: '${{ secrets.ARM_MGMTGROUP_ID }}'
  ARM_TENANT_ID: '${{ secrets.ARM_TENANT_ID }}'
  DEPLOYMENT_SP_ID: '${{ secrets.DEPLOYMENT_SP_ID }}'

jobs:
  ############################
  #   SET INPUT PARAMETERS   #
  ############################
  job_set_workflow_param:
    runs-on: ubuntu-20.04
    name: 'Set input parameters to output variables'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Set input parameters'
        id: get-workflow-param
        uses: ./.github/actions/templates/getWorkflowInput
        with:
          workflowPath: '${{ env.workflowPath}}'
    outputs:
      removeDeployment: ${{ steps.get-workflow-param.outputs.removeDeployment }}
      versioningOption: ${{ steps.get-workflow-param.outputs.versioningOption }}
      customVersion: ${{ steps.get-workflow-param.outputs.customVersion }}

  ##################
  #   UNIT TESTS   #
  ##################
  # Global tests
  # ------------
#  job_tests_module_global:
#    runs-on: ubuntu-20.04
#    name: 'Run global module tests'
#    steps:
#      - name: 'Checkout'
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#      - name: 'Test module'
#        uses: ./.github/actions/templates/validateModuleGeneral
#        with:
#          modulePath: '${{ env.modulePath }}'
#
#  # Global API tests
#  # ----------------
#  job_tests_module_global_api:
#    runs-on: ubuntu-20.04
#    name: 'Run global API module tests'
#    steps:
#      - name: 'Checkout'
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#      - name: 'Test module'
#        uses: ./.github/actions/templates/validateModuleApis
#        with:
#          modulePath: '${{ env.modulePath }}'
#
#  ###########################
#  # Deployment module tests #
#  ###########################
#  job_module_deploy_validation:
#    runs-on: ubuntu-20.04
#    name: 'Run deployment validation module tests'
#    needs:
#      - job_set_workflow_param
#      - job_tests_module_global
#      - job_tests_module_global_api
#    strategy:
#      fail-fast: false
#      matrix:
#        parameterFilePaths:
#          ['parameters.json', 'min.parameters.json', 'v1.parameters.json']
#    steps:
#      - name: 'Checkout'
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#      - name: Set environment variables
#        uses: deep-mm/set-variables@v1.0
#        with:
#          # Name of variable file
#          variableFileName: 'variables.module' # Don't write .json here
#      # ----------- #
#      ##  Dry Run  ##
#      # ----------- #
#      - name: 'Test module with parameter file [${{ matrix.parameterFilePaths }}]'
#        uses: ./.github/actions/templates/validateModuleDeploy
#        with:
#          templateFilePath: '${{ env.modulePath }}/deploy.bicep'
#          parameterFilePath: '${{ env.modulePath }}/.parameters/${{ matrix.parameterFilePaths }}'
#          location: '${{ env.defaultLocation }}'
#          resourceGroupName: '${{ env.resourceGroupName }}'
#          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
#          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
#      # ------------------- #
#      ##  Deploy & Remove  ##
#      # ------------------- #
#      - name: 'Deploy module with parameter file [${{ matrix.parameterFilePaths }}]'
#        id: step_deploy
#        uses: ./.github/actions/templates/deployModule
#        with:
#          templateFilePath: '${{ env.modulePath }}/deploy.bicep'
#          parameterFilePath: '${{ env.modulePath }}/.parameters/${{ matrix.parameterFilePaths }}'
#          location: '${{ env.defaultLocation }}'
#          resourceGroupName: '${{ env.resourceGroupName }}'
#          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
#          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
#          removeDeployment: '${{ needs.job_set_workflow_param.outputs.removeDeployment }}'

  ###############
  #   PUBLISH   #
  ###############
#  job_publish_module_templateSpec:
#    name: 'Publish module - Template Spec'
#    if: contains(fromJson('["refs/heads/main", "refs/heads/master"]'), github.ref, eq('${{ env.templateSpecsDoPublish }}', 'true'))
#    runs-on: ubuntu-20.04
#    needs:
#      - job_set_workflow_param
#      - job_module_deploy_validation
#    steps:
#      - name: 'Checkout'
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#      - name: Set environment variables
#        uses: deep-mm/set-variables@v1.0
#        with:
#          # Name of variable file
#          variableFileName: 'variables.module' # Don't write .json here
#      - name: 'Publish module'
#        uses: ./.github/actions/templates/publishModule
#        with:
#          templateSpecsRGName: '${{ env.templateSpecsRGName }}'
#          templateSpecsRGLocation: '${{ env.templateSpecsRGLocation }}'
#          templateSpecsDescription: '${{ env.templateSpecsDescription }}'


  job_publish_module_bicep:
    name: 'Publish module - Bicep'
    #if: and(contains(fromJson('["refs/heads/main", "refs/heads/master"]'), github.ref), eq('${{ env.bicepRegistryDoPublish }}', 'true'))
    runs-on: ubuntu-20.04
    needs:
      - job_set_workflow_param
      #- job_deploy_module
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set environment variables
        uses: deep-mm/set-variables@v1.0
        with:
          # Name of variable file
          variableFileName: 'variables.module' # Don't write .json here
      - name: 'Generate version number'
        id: 'versionNumber'
        shell: pwsh
        run: |
          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'resourcePublish' 'Get-ModifiedModules.ps1')

          $functionInput = @{
            ModuleFilePath = '${{ env.modulePath }}/deploy.bicep'
          }

          Write-Output "Invoke task with"
          Write-Output ($functionInput | ConvertTo-Json | Out-String)

          # Get the modified child resources
          Get-ModifiedModules @functionInput -Verbose

#      - name: 'Publish module'
#        uses: ./.github/actions/templates/publishModule
#        with:
#          bicepRegistryName: '${{ env.bicepRegistryName }}'
#          bicepRegistryRGName: '${{ env.bicepRegistryRGName }}'
#          bicepRegistryDoPublish: '${{ env.bicepRegistryDoPublish }}'
